pragma solidity ^0.4.14;

import './SafeMath.sol';
import './Ownable.sol';

contract Payroll is Ownable{
    using SafeMath for uint;

    struct Employee{
        address id;
        uint salary;
        uint lastPayday;
    }

    uint constant payDuration = 10 seconds;
    uint totalSalary = 0;

    address owner;
    
    //多組多組emploee data
    //Employee[] employees; 矩陣寫法
    //mapping取值：x = employees[employeeId]
    mapping(address => Employee) public employees;
    //增加增加public 可以直接取值，不需要check

    /*function Payroll() payable public{
        owner = msg.sender;
    }*/
    
    modifier onlyOwner{
        require(msg.sender == owner);
        _;
        //-代表省略號
    }
    
    modifier EmployeeExist(address employeeId){
         var employee = employees[employeeId];
         assert(employee.id != 0x0);
         _;
    }
    
 

    function _partialPaid(Employee employee) private {
       // uint payment = employees[employeeIndex].salary * (now - employees[employeeIndex].lastPayday) / payDuration;
        uint payment = employee.salary
        .mul (now.sub(employee.lastPayday))
        .div(payDuration);
        
        // employees[employeeIndex].id.transfer(payment);
        employee.id.transfer(payment);
    }

  /*  改由mapping 
    function _findEmployee(address employeeId) private view returns (int) {
        for (uint i = 0; i < employees.length; i++) {
            if (employees[i].id == employeeId) {
                return int(i);
            }
        }
        return - 1;
    }*/
    
    
    //增加 employee & salary
    function addEmployee(address employeeId, uint salary) payable public onlyOwner EmployeeExist(employeeId) {
        //require(msg.sender == owner);
        
        //int index = _findEmployee(employeeAddress);
        //var employee = employees[employeeId];
        
        //assert(index == - 1);
        //assert(employee.id = 0x0);
        
        //salary = salary * 1 ether;
        //employees.push(Employee(employeeAddress, salary, now));
        salary = salary.mul(1 ether);
        employees[employeeId] = Employee(employeeId,salary,now);

        //totalSalary += salary;
        totalSalary = totalSalary.add(salary);
    }

    function removeEmployee(address employeeId) payable public onlyOwner EmployeeExist(employeeId){
        // require(msg.sender == owner);
       
         // int index = _findEmployee(employeeId);
        var employee = employees[employeeId];
       
        //assert(index > - 1);
        //assert(employee.id != 0x0)

        //uint employeeIndex = uint(index);
        //_partialPaid(employeeIndex);
        _partialPaid(employee);
        
        uint salary = employees[employeeId].salary;
        totalSalary= totalSalary.sub(salary);
        
        // delete employees[employeeIndex];
        delete employees[employeeId];
        
        //employees[employeeIndex] = employees[employees.length - 1];
        //employees.length -= 1;
    }

    function updateEmployee(address employeeId, uint salary) payable public onlyOwner EmployeeExist(employeeId){
        // require(msg.sender == owner);
        
        //int index = _findEmployee(employeeAddress);
        var employee = employees[employeeId];
        
        //assert(index > - 1);
        //assert(employee.id != 0x0)

        // uint employeeIndex = uint(index);
        // _partialPaid(employeeIndex);
        _partialPaid(employee);

        // uint oldSalary = employees[employeeIndex].salary;
        // salary = salary * 1 ether;
        // employees[employeeIndex].salary = salary;
        // employees[employeeIndex].lastPayday = now;
        uint oldSalary = employee.salary;
        salary=salary.mul(1 ether);
        employees[employeeId] = Employee(employeeId,salary,now);

        totalSalary = totalSalary.add(salary).sub(oldSalary);
    }
    
    

    function addFund() payable public returns (uint) {
        return address(this).balance;
    }

    function calculateRunway() public view returns (uint) {
        //require(employees.length > 0);
        return address(this).balance.div(totalSalary);
    }

    function hasEnoughFund() public view returns (bool) {
        return calculateRunway() > 0;
    }

    function getPaid() payable public EmployeeExist(msg.sender){
        //int index = _findEmployee(msg.sender);
        //assert(index > - 1);
        var employee = employees[msg.sender];
        //assert(employee.id != 0x0);
     

        //uint employeeIndex = uint(index);
        //uint nextPayday = employees[employeeIndex].lastPayday + payDuration;
        uint nextPayday = employee.lastPayday.add(payDuration);
        assert(nextPayday < now);


        //employees[employeeIndex].lastPayday = nextPayday;
        employee.lastPayday = nextPayday;
        // 利用mapping把value存入
        
        //employees[employeeIndex].id.transfer(employees[employeeIndex].salary);
        employee.id.transfer(employee.salary);
    }
}

