pragma solidity ^0.4.24;

contract Payroll {
  uint constant payDuration = 10 seconds;
  
  address owner;
  uint salary;
  address employee;
  uint lastPayday;

constructor() public payable {
    owner = msg.sender;
}

function updateEmployee(address e) payable {
    require(msg.sender == owner);

    if (employee != 0x0) {
        uint payment = salary * (now - lastPayday) / payDuration;
        employee.transfer(payment);
        lastPayday = now;
    }

    employee = e;
}

function updateSalary(uint s) payable {
    require(msg.sender == owner);
    salary = s * 1 ether;
}


function addFund() payable returns (uint) {
    require (msg.sender == owner);
    return address(this).balance;
}

function calculateRunway() public view returns (uint) {
    return address(this).balance / salary;
}

function hasEnoughFund() public view returns (bool) {
    return calculateRunway() > 0;
}

function getPaid() {
    require(msg.sender == employee);

    uint nextPayday = lastPayday + payDuration;
    assert(nextPayday < now);

    lastPayday = nextPayday;
    employee.transfer(salary);
  }
}
